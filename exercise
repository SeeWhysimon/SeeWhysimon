//exercise 5.20

#include <iostream>
#include <vector>

int main()
{
	std::string preword = "", word = "";
	int cnt = 0;

	while (std::cin >> word) {
		if (word == preword) {
			++cnt;
			break;
		}
		else preword = word;
	}
	if (cnt == 0) std::cout << "no word was repeated" << std::endl;
	else std::cout << preword << " repeated twice" << std::endl;
	return 0;
}

//exercise 5.24

#include <iostream>

int main()
{
	double a, b;
	while (std::cin >> a >> b) {
		try {
			if (b != 0)
				std::cout << a/b << std::endl;
			else
				throw runtime_error("number divided by 0");
		}
		catch (runtime_error err) {
			std::cout << err.what() << "\nTry Again? Enter y or n" << std::endl;
			char c;
			std::cin >> c;
			if (!std::cin || c == 'n')
				break;
		}
	}
	return 0;
}

//exercise 7.12

sales_data(std::istream& is) { read(is, *this); }

//exercise 7.31

class Y;

class X {
	Y* ptr;
};

class Y {
	X obj_x;
};

//exercise 9.31

//function works for forward_list

void changeContainer(std::forward_list<int>& ifls)
{
    auto prev = ifls.before_begin();
    auto curr = ifls.begin();
    while (curr != ifls.end()) {
        if (*curr % 2) {
            prev = ifls.insert_after(curr, *curr);
            std::advance(curr, 2);
        }
        else {
            curr = ifls.erase_after(prev);
        }
    }
}

//function works for list

void changeContainer(std::list<int>& ils)
{
    auto iter = ils.begin();
    while (iter != ils.end()) {
        if (*iter % 2) {
            iter = ils.insert(iter, *iter);
            std::advance(iter, 2);
        }
        else 
            iter = ils.erase(iter);
    }
}

//main function

int main()
{
	std::list<int> ils = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	std::forward_list<int> ifls = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	changeContainer(ifls);
	changeContainer(ils);
	for (auto i : ifls)
		std::cout << i << " ";
	std::cout << std::endl;
	for (auto i : ils)
		std::cout << i << " ";
	std::cout << std::endl;
	return 0;
}
